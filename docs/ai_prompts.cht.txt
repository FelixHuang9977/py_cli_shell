CLI Shell 專案開發 AI 提示指南
==========================

專案願景
-------
創建一個基於 Python 的命令列介面 shell，結合現代 CLI 的靈活性和傳統 shell 的熟悉感。系統應同時支援互動式和批次操作，重點關注可擴展性、使用者友好性和可維護的程式碼結構。

核心開發提示
----------

1. 初始 Shell 框架
"創建一個基本的 Python 命令列介面 shell，提供：
- 具有目錄感知的命令提示符
- 支援歷史記錄的使用者輸入處理
- 命令執行框架
- 清理退出處理
包含錯誤處理和基本使用者回饋。"

2. 命令系統架構
"設計並實現動態命令載入系統，要求：
- 自動發現並載入 Python 檔案中的命令
- 使用 'cmd_' 前綴作為命令模組約定
- 支援命令組織的階層目錄結構
- 使用 argparse 一致地處理命令參數
- 提供清晰的錯誤訊息和說明文字"

3. 互動功能
"增強 shell 的互動功能，包括：
- 使用方向鍵導航命令歷史
- 命令和目錄的 Tab 自動完成
- 使用 '?' 鍵獲取上下文相關幫助
- 目錄導航快捷方式
- 清理終端輸出處理
確保流暢的使用者體驗和直覺的行為。"

4. 內建命令實現
"實現基本的內建命令：
- 'info' 命令顯示當前目錄可用的命令
- 'cd' 命令用於目錄導航
- 命令文檔的幫助系統
包含參數解析和完整的幫助文字。"

5. 批次模式操作
"添加批次模式支援，允許：
- 通過命令列參數執行命令
- 批次命令中的目錄導航
- 適當的錯誤處理和狀態報告
- 支援腳本的退出碼管理"

功能增強提示
----------

1. 命令發現
"如何實現命令發現系統，使其：
- 遞迴搜索目錄中的命令
- 適當處理命名衝突
- 提供清晰的可用命令回饋
- 支援動態載入和卸載"

2. 使用者介面改進
"增強使用者介面：
- 清晰一致的錯誤訊息
- 直覺的命令完成
- 錯誤輸入的有用建議
- 狀態信息顯示"

3. 命令執行
"實現健壯的命令執行系統：
- 正確處理參數
- 提供適當的回饋
- 優雅處理錯誤
- 支援命令鏈接"

文檔提示
-------

1. 使用者文檔
"創建全面的使用者文檔，涵蓋：
- 安裝和設置
- 基本用法和命令
- 進階功能
- 故障排除指南
包含範例和最佳實踐。"

2. 開發者文檔
"準備開發者文檔，包括：
- 專案架構概述
- 命令模組創建指南
- 測試要求
- 貢獻指南"

測試提示
-------

1. 功能測試
"設計測試案例：
- 命令載入和執行
- 目錄導航
- Tab 自動完成
- 命令歷史
- 錯誤處理"

2. 整合測試
"創建整合測試，驗證：
- 命令系統互動
- 目錄導航
- 批次模式操作
- 錯誤恢復"

程式碼審查提示
------------

1. 程式碼品質
"審查實現：
- Python 最佳實踐
- 錯誤處理完整性
- 程式碼組織
- 效能考慮"

2. 功能驗證
"驗證已實現的功能：
- 符合要求
- 處理邊界情況
- 提供良好的使用者體驗
- 文檔完善"

維護提示
-------

1. 錯誤修復
"處理錯誤時：
- 清楚描述問題
- 提供重現步驟
- 包含相關程式碼段
- 解釋預期行為"

2. 功能添加
"添加新功能時：
- 描述功能
- 概述實現方法
- 考慮向後相容性
- 包含文檔更新"

使用指南
-------
- 包含具體上下文和要求
- 在相關時引用現有程式碼
- 提供範例場景
- 指定預期結果
- 包含錯誤處理考慮