專案：診斷命令行工具開發

目標：
建立一個命令行診斷工具，用於執行和管理系統測試，主要針對硬體元件如 CPU 和 USB。

主要元件：

1. 命令行結構
- 使用 Click 框架建立命令行界面
- 實作主要命令：categories、list、run、config、show
- 支援全局選項：--verbose、--test-dir

2. 測試管理
- 依類別組織測試（如 cpu、usb）
- 支援測試探索和列表
- 啟用測試執行及各種選項
- 產生詳細測試報告

3. 配置系統
- 實作配置檔案管理
- 支援測試專用配置
- 啟用日誌配置

4. 日誌系統
- 建立完整的日誌機制
- 支援不同日誌級別
- 產生測試執行摘要
- 儲存帶時間戳的日誌

開發提示：

1. 基本命令行框架
"使用 Click 框架建立具有基本測試管理命令的 Python 命令行工具"

2. 測試組織
"實作可依類別（cpu、usb 等）組織測試的測試探索系統"

3. 測試執行
"建立可執行測試並使用 pytest 收集結果的測試執行系統"

4. 配置管理
"實作用於管理測試參數和預期結果的配置系統"

5. 日誌系統
"建立可產生控制台輸出和檔案日誌的日誌系統"

6. 測試結果收集
"實作可捕獲測試結果並產生摘要的測試結果收集器"

7. 文件
"建立包含使用指南和範例的完整文件"

實作指南：

1. 命令結構：
- categories：列出可用的測試類別
- list：顯示可用的測試，可依類別過濾
- run：執行指定的測試及選項
- config：顯示當前配置
- show：顯示測試結果

2. 測試組織：
- 依硬體元件分組測試
- 使用一致的命名規則（test_*.py）
- 支援子目錄中的測試探索

3. 配置：
- 使用 JSON 格式的配置
- 支援多個配置檔案
- 啟用執行時配置變更

4. 日誌：
- 日誌檔案包含時間戳
- 支援多個日誌級別
- 產生人類可讀的摘要
- 以結構化格式儲存測試結果

5. 結果收集：
- 追蹤通過/失敗/跳過的測試
- 捕獲測試持續時間
- 包含錯誤詳情
- 產生格式化摘要

預期輸出：
1. 可執行的命令行工具
2. 配置檔案
3. 日誌檔案和測試摘要
4. 文件和使用指南

檔案結構：
.
├── config/
│   ├── cpu_config.json
│   └── log_config.json
├── logs/
│   └── test_execution_*.log
├── testcase/
│   ├── cpu/
│   │   └── test_*.py
│   └── usb/
│       └── test_*.py
├── docs/
│   └── *.txt
└── diag_cli

使用範例：
1. 列出類別：
   ./diag_cli categories

2. 列出測試：
   ./diag_cli list cpu

3. 執行測試：
   ./diag_cli run cpu/test_cpu_core.py

4. 使用選項執行：
   ./diag_cli --verbose run --stress cpu/test_cpu_core.py